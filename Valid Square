class Solution:
    # This method returns true if the given 4 points form a square, false otherwise
    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:

        # We use a set to store the distances between the points
        distances = set()
        
        # Calculate the distances between all pairs of points and add them to the set
        distances.add(self.distance_square(p1, p2))
        distances.add(self.distance_square(p1, p3))
        distances.add(self.distance_square(p1, p4))
        distances.add(self.distance_square(p2, p3))
        distances.add(self.distance_square(p2, p4))
        distances.add(self.distance_square(p3, p4))
# A square must have 4 equal sides, so the set must contain 2 different values (the lengths of the sides and the diagonals)

# The set should not contain 0, as that would mean that two points have the same coordinates
        return 0 not in distances and len(distances) == 2
        
    # This method calculates the distance between two points and returns its square
    def distance_square(self, a: List[int], b: List[int]) -> int:

        # We use the Pythagorean theorem to calculate the distance between the points
        return (a[0] - b[0])**2 + (a[1] - b[1])**2

